{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sachin singh\\\\OneDrive\\\\Desktop\\\\MDB\\\\Frontend\\\\src\\\\Component\\\\Blogs\\\\Comments.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Comments() {\n  _s();\n  const [post, setPost] = useState([]);\n  const [refreshComments, setRefreshComments] = useState(false);\n  const [newComment, setNewComment] = useState('');\n  useEffect(() => {\n    const getComments = async () => {\n      const token = sessionStorage.getItem('accessToken');\n      const data = await fetch('http://127.0.0.1:8000/Comments', {\n        method: 'GET',\n        headers: {\n          Authorization: `${token}`\n        }\n      });\n      const res = await data.json();\n      if (res.status === 'Success') {\n        setPost(res.comments);\n      }\n    };\n    if (refreshComments) {\n      getComments();\n      setRefreshComments(false);\n    }\n  }, [refreshComments]);\n  const handleRefresh = () => {\n    setRefreshComments(true);\n  };\n  const handleSubmitComment = async () => {\n    const token = sessionStorage.getItem('accessToken');\n    const response = await fetch('http://127.0.0.1:8000/SubmitComment', {\n      method: 'POST',\n      headers: {\n        Authorization: `${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        comment: newComment\n      })\n    });\n    const res = await response.json();\n    if (res.status === 'Success') {\n      setNewComment(''); // Clear the input field\n      setRefreshComments(true); // Refresh comments after submission\n    }\n  };\n\n  const render = post.map(data => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: post && post.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"my-4 \",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row \",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-2 card-img-top ProfileDiv\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: \"https://mdbcdn.b-cdn.net/img/new/avatars/1.webp\",\n                width: '80px',\n                className: \" rounded-circle shadow-4\",\n                alt: \"Avatar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-10\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: data.username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                style: {\n                  fontSize: '12px',\n                  fontFamily: 'monospace'\n                },\n                children: data.createdAt\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                style: {\n                  fontFamily: 'monospace'\n                },\n                className: \"px-1 CommentUserComment\",\n                children: data.comment\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"No Comments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, data.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRefresh,\n      children: \"Refresh Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: newComment,\n        onChange: e => setNewComment(e.target.value),\n        placeholder: \"Enter your comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmitComment,\n        children: \"Submit Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), render]\n  }, void 0, true);\n}\n_s(Comments, \"65ju/GqyoFciZXnbhnjiMSRkY4E=\");\n_c = Comments;\nvar _c;\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Comments","_s","post","setPost","refreshComments","setRefreshComments","newComment","setNewComment","getComments","token","sessionStorage","getItem","data","fetch","method","headers","Authorization","res","json","status","comments","handleRefresh","handleSubmitComment","response","body","JSON","stringify","comment","render","map","children","length","className","src","width","alt","fileName","_jsxFileName","lineNumber","columnNumber","username","style","fontSize","fontFamily","createdAt","id","onClick","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/Sachin singh/OneDrive/Desktop/MDB/Frontend/src/Component/Blogs/Comments.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nexport default function Comments() {\r\n  const [post, setPost] = useState([]);\r\n  const [refreshComments, setRefreshComments] = useState(false);\r\n  const [newComment, setNewComment] = useState('');\r\n\r\n  useEffect(() => {\r\n    const getComments = async () => {\r\n      const token = sessionStorage.getItem('accessToken');\r\n      const data = await fetch('http://127.0.0.1:8000/Comments', {\r\n        method: 'GET',\r\n        headers: {\r\n          Authorization: `${token}`,\r\n        },\r\n      });\r\n      const res = await data.json();\r\n      if (res.status === 'Success') {\r\n        setPost(res.comments);\r\n      }\r\n    };\r\n\r\n    if (refreshComments) {\r\n      getComments();\r\n      setRefreshComments(false);\r\n    }\r\n  }, [refreshComments]);\r\n\r\n  const handleRefresh = () => {\r\n    setRefreshComments(true);\r\n  };\r\n\r\n  const handleSubmitComment = async () => {\r\n    const token = sessionStorage.getItem('accessToken');\r\n    const response = await fetch('http://127.0.0.1:8000/SubmitComment', {\r\n      method: 'POST',\r\n      headers: {\r\n        Authorization: `${token}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ comment: newComment }),\r\n    });\r\n    const res = await response.json();\r\n    if (res.status === 'Success') {\r\n      setNewComment(''); // Clear the input field\r\n      setRefreshComments(true); // Refresh comments after submission\r\n    }\r\n  };\r\n\r\n  const render = post.map((data) => {\r\n    return (\r\n      <div key={data.id}>\r\n        <div>\r\n          {post && post.length > 0 ? (\r\n            <div className=\"my-4 \">\r\n              <div className=\"row \">\r\n                <div className=\"col-md-2 card-img-top ProfileDiv\">\r\n                  <img\r\n                    src=\"https://mdbcdn.b-cdn.net/img/new/avatars/1.webp\"\r\n                    width={'80px'}\r\n                    className=\" rounded-circle shadow-4\"\r\n                    alt=\"Avatar\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"col-md-10\">\r\n                  <h3>{data.username}</h3>\r\n                  <p style={{ fontSize: '12px', fontFamily: 'monospace' }}>\r\n                    {data.createdAt}\r\n                  </p>\r\n                  <p style={{ fontFamily: 'monospace' }} className=\"px-1 CommentUserComment\">\r\n                    {data.comment}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <h2>No Comments</h2>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <button onClick={handleRefresh}>Refresh Comments</button>\r\n      <div>\r\n        <textarea\r\n          value={newComment}\r\n          onChange={(e) => setNewComment(e.target.value)}\r\n          placeholder=\"Enter your comment\"\r\n        />\r\n        <button onClick={handleSubmitComment}>Submit Comment</button>\r\n      </div>\r\n      {render}\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}